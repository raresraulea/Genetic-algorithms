#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <algorithm>

#define indivizi 500

using namespace std;

ifstream fin("in.txt");

int N;

struct punct
{
	int x, y;
};

punct p[100];

double  dist(punct a, punct b)
{
	return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

double eval(vector<int> a)
{
	double s = 0;
	for (int i = 1; i < a.size(); i++)
	{
		s += dist(p[a[i - 1]], p[a[i]]);
	}
	s += dist(p[a.size() - 1], p[a[0]]);
	return s;
}

bool f(vector<int> a, vector <int> b)
{
	return eval(a) < eval(b);
}

vector<int> incrucisare(vector<int> a, vector<int> b)
{

	/*for (int i = 0; i < a.size(); i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;
	for (int i = 0; i < b.size(); i++)
	{
		cout << b[i] << ' ';
	}
	cout << endl;*/

	vector<pair<int, int> > x;
	for (int i = N / 2; i < N; i++)
	{
		pair<int, int> aux;
		aux.second = a[i];
		for (int j = 0; j < N; j++)
		{
			if (b[j] == aux.second)
			{
				aux.first = j;
				break;
			}
		}
		x.push_back(aux);

	}
	sort(x.begin(), x.end());
	for (int i = N / 2; i < N; i++)
	{
		a[i] = x[i - N / 2].second;
	}

	/*for (int i = 0; i < a.size(); i++)
	{
		cout << a[i] << ' ';
	}
	cout << endl;*/
	return a;

}
void mutatie(vector<int>& a)
{
	int poz1 =	1 + rand() % (a.size()-1);
	int poz2 = 1 + rand() % (a.size() - 1);

	swap(a[poz1], a[poz2]);

}

int main()
{
	srand(time(NULL));

	vector<int>* cromozomi = new vector<int>[indivizi];
	vector<int> optim;

	fin >> N;
	for (int i = 1; i <= N; i++)
	{
		fin >> p[i].x >> p[i].y;
	}

	vector<int> aux;
	for (int i = 1; i <= N; i++)
	{
		aux.push_back(i);
	}

	//int indivizi = 100;
	for (int i = 0; i < indivizi; i++)
	{
		random_shuffle(aux.begin() + 1, aux.end());
		cromozomi[i] = aux;
	}

	/*for (int i = 0; i < indivizi; i++)
	{
		for (int j = 0; j < cromozomi[i].size(); j++)
		{
			cout << cromozomi[i][j] << ' ';
		}
		cout << eval(cromozomi[i]);
		cout << endl;
	}*/
	//incrucisare(cromozomi[0], cromozomi[1]);

	int generatiiDorite = 200;
	int totalGeneratii = generatiiDorite;
	optim = cromozomi[0];

	while (generatiiDorite-- > 0)
	{
		sort(cromozomi, cromozomi + indivizi, f);
		if (eval(optim) > eval(cromozomi[0]))
		{
			optim = cromozomi[0];
			cout << totalGeneratii - generatiiDorite  << "optim = " << eval(optim) << endl;
		}


		//vector<int>* copii = new vector<int>[indivizi / 2];

		for (int i = 0; i < indivizi / 2; i++)
		{
			int rand1 = rand() % (indivizi);
			int rand2 = rand() % (indivizi);

			vector<int> parinte1;
			vector<int> parinte2;

			if (eval(cromozomi[rand1]) < eval(cromozomi[rand2]))
			{
				parinte1 = cromozomi[rand1];
			}
			else
				parinte1 = cromozomi[rand2];

			int rand3 = rand() % (indivizi);
			int rand4 = rand() % (indivizi);


			if (eval(cromozomi[rand3]) < eval(cromozomi[rand4]))
			{
				parinte2 = cromozomi[rand3];
			}
			else
				parinte2 = cromozomi[rand4];

			cromozomi[i + indivizi / 2] = incrucisare(parinte1, parinte2);

			if (rand() % 10 < 3)
			{
				mutatie(cromozomi[i + indivizi / 2]);
			}

		}

	}
	
	cout << endl << eval(optim);
	/*for (int i = 0; i < indivizi; i++)
	{
		for (int j = 0; j < cromozomi[i].size(); j++)
		{
			cout << cromozomi[i][j] << ' ';
		}
		cout << eval(cromozomi[i]);
		cout << endl;
	}*/

}
/* EXEMPLU INPUT in fisier
13
0 0
0 4
3 0
4 7
7 3
2 1
2 6
9 3
8 7
12 10
10 1
13 8
20 5
*/